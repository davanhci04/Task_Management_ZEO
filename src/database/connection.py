from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import ZODB
import ZODB.config
from persistent import Persistent
from persistent.mapping import PersistentMapping
import transaction
import time
from config.settings import DATABASE_CONFIG, NETWORK_CONFIG, DEBUG

DATABASE_URL = "sqlite:///tasks.db"  # Update with your database URL

engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)

def get_session():
    return Session()

def close_session(session):
    session.close()

class DatabaseConnection:
    def __init__(self):
        self.db = None
        self.connection = None
        self.root = None
        
    def connect(self, server_host=None, server_port=None):
        """K·∫øt n·ªëi t·ªõi ZEO server v·ªõi retry logic"""
        # S·ª≠ d·ª•ng config t·ª´ .env ho·∫∑c tham s·ªë truy·ªÅn v√†o
        host = server_host or DATABASE_CONFIG['host']
        port = server_port or DATABASE_CONFIG['port']
        
        retry_attempts = NETWORK_CONFIG['retry_attempts']
        retry_delay = NETWORK_CONFIG['retry_delay']
        
        for attempt in range(retry_attempts):
            try:
                if DEBUG:
                    print(f"Attempt {attempt + 1}/{retry_attempts}: Connecting to ZEO server at {host}:{port}")
                
                # K·∫øt n·ªëi t·ªõi ZEO server
                import ZEO
                self.db = ZEO.DB((host, port))
                self.connection = self.db.open()
                self.root = self.connection.root()
                
                # Kh·ªüi t·∫°o c·∫•u tr√∫c d·ªØ li·ªáu n·∫øu ch∆∞a c√≥
                if 'users' not in self.root:
                    self.root['users'] = PersistentMapping()
                    transaction.commit()
                    if DEBUG:
                        print("Initialized database structure")
                
                if DEBUG:
                    print(f"‚úÖ Successfully connected to ZEO server at {host}:{port}")
                return True
                
            except Exception as e:
                if DEBUG:
                    print(f"‚ùå Connection attempt {attempt + 1} failed: {e}")
                
                if attempt < retry_attempts - 1:
                    if DEBUG:
                        print(f"Retrying in {retry_delay} seconds...")
                    time.sleep(retry_delay)
                else:
                    print(f"Failed to connect after {retry_attempts} attempts")
                    
        return False
    
    def reload_connection(self):
        """Reload connection ƒë·ªÉ sync v·ªõi ZEO server"""
        try:
            if self.connection:
                # Sync v·ªõi server ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
                self.connection.sync()
                # C·∫≠p nh·∫≠t root object
                self.root = self.connection.root()
                if DEBUG:
                    print("üîÑ Connection reloaded successfully")
            return True
        except Exception as e:
            if DEBUG:
                print(f"‚ùå Reload connection error: {e}")
            return False
    
    def invalidate_cache(self):
        """Invalidate cache ƒë·ªÉ force reload t·ª´ server"""
        try:
            if self.connection:
                self.connection.cacheMinimize()
                self.connection.sync()
                if DEBUG:
                    print("üóëÔ∏è Cache invalidated and synced")
            return True
        except Exception as e:
            if DEBUG:
                print(f"‚ùå Cache invalidation error: {e}")
            return False
    
    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi"""
        try:
            if self.connection:
                self.connection.close()
                if DEBUG:
                    print("üîå Database connection closed")
            if self.db:
                self.db.close()
        except Exception as e:
            if DEBUG:
                print(f"‚ùå Error closing connection: {e}")
    
    def get_root(self):
        """L·∫•y root object v·ªõi sync"""
        # Sync tr∆∞·ªõc khi tr·∫£ v·ªÅ root ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        self.reload_connection()
        return self.root
    
    def test_connection(self):
        """Test k·∫øt n·ªëi v√† in th√¥ng tin debug"""
        if DEBUG:
            try:
                root = self.get_root()
                user_count = len(root.get('users', {}))
                print(f"üìä Connection test: {user_count} users in database")
                return True
            except Exception as e:
                print(f"‚ùå Connection test failed: {e}")
                return False
        return self.connection is not None

# Singleton instance
db_connection = DatabaseConnection()